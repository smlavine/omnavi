#!/bin/bash
# omnavi - A program to receive YouTube subscriptions without a Google account.
# Copyright (C) 2020-2021 Sebastian LaVine <mail@smlavine.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.

output() {

	# Exit if date is invalid. This will also print date's output to stderr.
	compdate="$(date +%s --date="$date")" || exit

	# Follow this with a channel ID to get the URL to a channel's RSS feed.
	feed_prefix="https://www.youtube.com/feeds/videos.xml?channel_id="

	# Follow this with a video ID to get the URL to a video.
	url_prefix="https://youtu.be/"

	# Only the first column of a file is read to allow for comments (like the
	# channel's name) to follow.
	awk '{ print $1 }' "$file" | while read -r channel_id; do
		# Must declare variable at this scope because of how while loops and
		# subshells are handled.
		info=""
		while read -r line && read -r uploadtime; do
			# The first line is the name of input is the channel.
			if [ -z "$info" ]; then
				if [ "$linechars" ]; then
					info="|$line:\n"
				else
					info="$line:\n"
				fi
			fi

			# Convert the upload timestamps to epoch time.
			uploadtime="$(date +%s -d "$uploadtime")"

			# Only print video info if the video was uploaded since $compdate.
			if [ "$uploadtime" -gt "$compdate" ]; then
				while read -r title && read -r dur && read -r id; do
					# Nicely format information about the video.
					# Format time from seconds to [hh:mm:ss]. The 'sed' at the end
					# removes the hours place if it is empty.
					dur="$(printf "[%02d:%02d:%02d]" $(( dur / 3600 )) $(( ( dur / 60 ) % 60 )) $(( dur % 60 )) | sed 's/\[00:/\[/')"
					# Only print line characters if linechars is set.
					if [ "$linechars" ]; then
						info="$info├──┬─$title $dur\n│  └── $url_prefix$id\n"
					else
						info="$info$title $dur\n  $url_prefix$id\n"
					fi
				done < <(youtube-dl --no-warnings -j "$line" | jq -r '.title,.duration,.id' | sed 's/%/%%/g')
				# The pipe sequence above does the following:
				# Downloads the json file for the given YouTube video,
				# Extracts the values we need, and
				# Sanitizes the info for printf.
			fi
		done < <(curl -sL "$feed_prefix$channel_id" | sed 's/^ *//' | grep -e '^<yt:videoId>' -e '^<published>' -e '^<name>' | sed "s_^<yt:videoId>_$url_prefix/_;s/<\/yt:videoId>$//" | sed '2,${ /^<name>.*$/ d};' | sed 's/^<[a-z]*>//;s/<\/[a-z]*>$//')
		# The pipe sequence above does the following:
		# Downloads the XML file from YouTube,
		# Removes leading whitespace,
		# Extracts the lines we need,
		# Formats the youtube URL,
		# Removes all name tags except the first (for channel name), and
		# Removes all other opening and closing tags.
	done
}

usage() {
	cat << EOF
omnavi - A program to receive YouTube subscriptions without a Google account.
Copyright (C) 2020 Sebastian LaVine <mail@smlavine.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see http://www.gnu.org/licenses/.

Usage: omnavi [-hn] [-d date] [-f file] [-g video]
Options:
	-h          Print this help and exit.
	-n          Don't print Unicode line characters when formatting.
	-d date     Instead of comparing against 24 hours ago,
	            compare against this date.
	-f file     Instead of reading from stdin, read from this file.
	-g video    Print the channel ID of the uploader of the given video.
For examples, see README.md or https://sr.ht/~smlavine/omnavi.
EOF
}

date="yesterday"
file="-"
linechars=1
while getopts "d:f:g:hn" o; do
	case "$o" in
		d) date="$OPTARG" ;;
		f) file="$OPTARG" ;;
		g) get="$OPTARG" ;;
		n) linechars= ;;
		*) usage && exit ;;
	esac
done

if [ "$get" ]; then
	# Get the channel ID and uploader of the video, then put them both on one
	# line with a tab between them with 'paste'.
	youtube-dl -j "$get" | jq -r '.channel_id,.uploader' | paste - -
elif [ "$file" = "-" ] || [ -f "$file" ]; then
	output
else
	>&2 echo "Error: '$file' does not exist."
	exit 1
fi
