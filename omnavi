#!/bin/bash
# omnavi - A program to receive YouTube subscriptions without a Google account.
# Copyright (C) 2020 Sebastian LaVine <mail@smlavine.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.

output() {

	# Exit if date is invalid. This will also print date's output to stderr.
	compdate="$(date +%s --date="$date")" || exit

	# Follow this with a channel ID to get a URL to a channel's RSS feed.
	feed_prefix="https://www.youtube.com/feeds/videos.xml?channel_id="

	# Only the first column of a file is read to allow for comments (like the
	# channel's name) to follow.
	awk '{ print $1 }' "$file" | while read channel_id; do
		# Must declare variable at this scope because of how while loops and
		# subshells are handled.
		info=""
		while read line && read uploadtime; do
			# The first line is the name of input is the channel.
			[ -z "$info" ] &&
				if [ -n "$nolinechars" ]; then
				info="$line:\n"
			else
				info="|$line:\n"
			fi

			# Convert the upload timestamps to epoch time.
			uploadtime="$(date +%s -d "$uploadtime")"

			# Only print video info if the video was uploaded since $compdate.
			if [ "$uploadtime" -gt "$compdate" ]; then
				while read title && read dur && read id; do
					# Nicely format information about the video.
					# Format time from seconds to [hh:mm:ss]. The 'sed' at the end
					# removes the hours place if it is empty.
					dur="$(printf "[%02d:%02d:%02d]" $(( dur / 3600 )) $(( ( dur / 60 ) % 60 )) $(( dur % 60 )) | sed 's/\[00:/\[/')"
					# Only print line characters if nolinechars is not set.
					[ -n "$nolinechars" ] && info="$info$title $dur\n  youtu.be/$id\n" || info="$info├──┬─$title $dur\n│  └── youtu.be/$id\n"
				done < <(youtube-dl --no-warnings -j "$line" | jq -r '.title,.duration,.id' | sed 's/%/%%/g')
				# The pipe sequence above does the following:
				# Downloads the json file for the given YouTube video,
				# Extracts the values we need, and
				# Sanitizes the info for printf.
			fi
		done < <(curl -sL "$feed_prefix$channel_id" | sed 's/^ *//' | grep -e '^<yt:videoId>' -e '^<published>' -e '^<name>' | sed 's/^<yt:videoId>/youtu.be\//;s/<\/yt:videoId>$//' | sed '2,${ /^<name>.*$/ d};' | sed 's/^<[a-z]*>//;s/<\/[a-z]*>$//')
		# The pipe sequence above does the following:
		# Downloads the XML file from YouTube,
		# Removes leading whitespace,
		# Extracts the lines we need,
		# Formats the youtube URL,
		# Removes all name tags except the first (for channel name), and
		# Removes all other opening and closing tags.

		# Only print info if there are new videos, meaning info is more
		# than one line long.
		[ "$(printf "$info" | wc -l)" -gt 1 ] && printf "$info\n"
	done
}

usage() {
	cat << EOF
omnavi - A program to receive YouTube subscriptions without a Google account.
Copyright (C) 2020 Sebastian LaVine <mail@smlavine.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see http://www.gnu.org/licenses/.

Usage: omnavi [-hn] [-d date] [-f file]
Options:
	-h          Print this help and exit.
	-n          Don't print Unicode line characters when formatting.
	-d date     Instead of comparing against 24 hours ago,
	            compare against this date.
	-f file     Instead of reading from stdin, read from this file.
Examples:
	omnavi # read from standard input
	omanvi -f example-input-file.txt # read from specified file instead of stdin
	omnavi -f example-input-file.txt -d 'yesterday 10:40am UTC' # also use date
	omnavi -d 'last wednesday' # read from standard input, but also compare against specified date
EOF
}

date="yesterday"
file="-"
while getopts "d:f:hn" o; do
	case "$o" in
		d) date="$OPTARG" ;;
		f) file="$OPTARG" ;;
		n) nolinechars="True" ;;
		*) usage && exit ;;
	esac
done
if [ "$file" = "-" -o -f "$file" ]; then
	output
else
	>&2 echo "Error: "$file" does not exist."
	exit 1
fi
